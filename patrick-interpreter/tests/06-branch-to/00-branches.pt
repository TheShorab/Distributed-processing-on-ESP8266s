function: pow(llint base, int exponent) llint 
{
    declare: llint result = 1

    loop: int i = 0 up_to exponent, step = 1 
    {
        result = result * base
    }

    return: result
}

declare: llint result = 0
declare: llint base = 2
declare: int exponent = 3

invoke: result = pow(base, exponent)

print: result

if: CPU_ID == 0
{
    loop: int i = 1 up_to CPUS, step = 1 
    {
        branch_to: i as branch__i
        {
            loop: int j = i * 1000 up_to j + 1000, step = 1 
            {
                result = result + result
            }
        }
        dispatch: branch__i
    }
} 

loop: int i = 1 up_to CPUS, step = 1 
{
    dispatch: branch__i
}

loop: int i = 0 up_to 1000, step = 1 
{
    result = result + result
}

collect: branch__1

